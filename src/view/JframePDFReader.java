/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.parser.PdfTextExtractor;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.Thread.sleep;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.PDFTableModel;
import model.PDFparametro;

/**
 *
 * @author italo
 */
public class JframePDFReader extends javax.swing.JFrame {

    String parametroTavrida = "";
    PDFTableModel pdfTable = new PDFTableModel();

    String verify;
    int qtdPDFconvertidos = 0;
    String Serial = null;
    String S;
    String IA = null;
    String IB = "";
    String IC = "";
    String IN = "";
    String VA = "";
    String VB = "";
    String VC = "";
    String VR = "";
    String VS = "";
    String VT = "";
    File[] files = null;
    String[] paramentrosReligador;
    List<String> dadoss = new ArrayList<>();

 

    public JframePDFReader() {
        initComponents();
        tablePDF.setModel(pdfTable);
        this.setIconImage((new javax.swing.ImageIcon(getClass().getResource("/images/icons8-add-file-64.png")).getImage()));
        PDFBar.setBackground(Color.red);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnPDF = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePDF = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        PDFBar = new javax.swing.JProgressBar();
        btnClear = new javax.swing.JButton();
        jLabelPDFLidos = new javax.swing.JLabel();
        jLQtdPDFlidos = new javax.swing.JLabel();
        jLabelPDFConvertidos = new javax.swing.JLabel();
        jLabelQtdConvertidos = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lupa Tavrida Converter");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        btnPDF.setBackground(new java.awt.Color(255, 255, 255));
        btnPDF.setForeground(new java.awt.Color(255, 255, 255));
        btnPDF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-pdf-filled-50.png"))); // NOI18N
        btnPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPDFActionPerformed(evt);
            }
        });

        tablePDF.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tablePDF.setForeground(new java.awt.Color(51, 51, 51));
        tablePDF.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial", "IA", "IB", "IC", "IN", "VA", "VB", "VC", "VR", "VS", "VT"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePDF.setGridColor(new java.awt.Color(255, 255, 255));
        tablePDF.setName(""); // NOI18N
        tablePDF.setRowMargin(3);
        tablePDF.setSelectionBackground(new java.awt.Color(153, 153, 153));
        tablePDF.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tablePDF.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tablePDF);

        btnSave.setBackground(new java.awt.Color(255, 255, 255));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-save-filled-50.png"))); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        PDFBar.setBackground(new java.awt.Color(0, 153, 255));
        PDFBar.setForeground(new java.awt.Color(0, 153, 255));
        PDFBar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        PDFBar.setFocusCycleRoot(true);
        PDFBar.setStringPainted(true);
        PDFBar.setVerifyInputWhenFocusTarget(false);

        btnClear.setBackground(new java.awt.Color(255, 255, 255));
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-erase-filled-50.png"))); // NOI18N
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jLabelPDFLidos.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelPDFLidos.setText("Arquivos PDF lidos:");

        jLQtdPDFlidos.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLQtdPDFlidos.setText("0");

        jLabelPDFConvertidos.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelPDFConvertidos.setText("Arquivos PDF convertidos:");

        jLabelQtdConvertidos.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabelQtdConvertidos.setText("0");

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel1.setText("Selecionar");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel2.setText("Salvar");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel3.setText("Limpar");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PDFBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPDF)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnClear))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel2)
                        .addGap(54, 54, 54)
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelPDFLidos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLQtdPDFlidos))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelPDFConvertidos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelQtdConvertidos)))
                .addContainerGap(326, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPDF)
                    .addComponent(btnSave)
                    .addComponent(btnClear)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPDFLidos)
                            .addComponent(jLQtdPDFlidos))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPDFConvertidos)
                            .addComponent(jLabelQtdConvertidos))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PDFBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPDFActionPerformed

        JFileChooser arqPDF = new JFileChooser();// criaS janela de busca
        arqPDF.setDialogTitle("Selecionar PDF"); // Titulo da janela de busca
        arqPDF.setMultiSelectionEnabled(true);
        arqPDF.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PDF document", "pdf");
        arqPDF.setFileFilter(filter);
        int retorno = arqPDF.showOpenDialog(this);

        if (retorno == 1) {
            JOptionPane.showMessageDialog(null, "Por favor, escolha um ou mais arquivos PDF");

        }

        if (retorno == JFileChooser.APPROVE_OPTION) {

            files = arqPDF.getSelectedFiles();
            for (int i = 0; i < files.length; i++) {
                 
               int t = files.length;
               int p = 100* (i+1)/t;
                PDFBar.setValue(p);
                try {
                    Thread.sleep(20);
                } catch (InterruptedException ex) {
                    Logger.getLogger(JframePDFReader.class.getName()).log(Level.SEVERE, null, ex);
                }
                PdfReader reader = null;
                PDFparametro parametro = new PDFparametro();
                try {
                    reader = new PdfReader(new FileInputStream(files[i]));
                } catch (FileNotFoundException ex) {
                    System.err.println("Sem doc");
                } catch (IOException ex) {
                    System.err.println("Falha I/O");
                }

                String[] textoPagina = null;

                try {
                    textoPagina = PdfTextExtractor.getTextFromPage(reader, 1).split("\n");
                } catch (IOException ex) {
                    System.err.println("Erro I/O");
                }

                for (String textoPagina1 : textoPagina) {
                    String PDF = textoPagina1;

                    if (PDF.contains("Número")) {
                        String serial = textoPagina1;

                        if (serial.contains("/")) {
                            Serial = serial.replaceAll("(\\d+-\\d+-\\d+|\\d+\\/\\d+\\/\\d+)", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                            parametro.setSerial(Serial);

                        } else {

                            Serial = serial.replaceAll("[0-9][0-9][.][0-9][0-9][.][0-9][0-9]", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                            parametro.setSerial(Serial);
                        }

                    }

                    if (PDF.contains("CIX1")) {
                        String ia = textoPagina1;
                        IA = ia.replaceAll("CIX?[0-9] V\\/kA - ", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                        parametro.setIA(IA);
                    }

                    if (PDF.contains("CIX2")) {
                        String ib = textoPagina1;
                        IB = ib.replaceAll("CIX?[0-9] V\\/kA - ", "");
                        parametro.setIB(IB);
                    }

                    if (PDF.contains("CIX3")) {
                        String ic = textoPagina1;
                        IC = ic.replaceAll("CIX?[0-9] V\\/kA - ", "");
                        parametro.setIC(IC);
                    }

                    if (PDF.contains("CIXN")) {
                        String in = textoPagina1;
                        IN = in.replaceAll("CIX?[N] V\\/kA - ", "");
                        parametro.setIN(IN);
                    }

                    if (PDF.contains("CUX1")) {
                        String va = textoPagina1;
                        VA = va.replaceAll("\\sCUX?[0-9] V\\/kV -", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                        parametro.setVA(VA);
                    }

                    if (PDF.contains("CUX2")) {
                        String vb = textoPagina1;
                        VB = vb.replaceAll("CUX?[0-9] V\\/kV - ", "");
                        parametro.setVB(VB);
                    }

                    if (PDF.contains("CUX3")) {
                        String vc = textoPagina1;
                        VC = vc.replaceAll("CUX?[0-9] V\\/kV - ", "");
                        parametro.setVC(VC);

                    }

                    if (PDF.contains("CUX4")) {
                        String vr = textoPagina1;
                        VR = vr.replaceAll("CUX?[0-9] V\\/kV - ", "");
                        parametro.setVR(VR);
                    }

                    if (PDF.contains("CUX5")) {
                        String vs = textoPagina1;
                        VS = vs.replaceAll("CUX?[0-9] V\\/kV - ", "");
                        parametro.setVS(VS);

                    }

                    if (PDF.contains("CUX6")) {
                        String vt = textoPagina1;
                        VT = vt.replaceAll("CUX?[0-9] V\\/kV - ", "");
                        parametro.setVT(VT);
                    }

                }

                
                pdfTable.addRow(parametro);
                 
                jLQtdPDFlidos.setText(String.valueOf(files.length));
            }

            JOptionPane.showMessageDialog(null, "Seleção efetuada com sucesso!");

        }


    }//GEN-LAST:event_btnPDFActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        JFileChooser saveFile = new JFileChooser();

        saveFile.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int retorno = saveFile.showSaveDialog(jPanel1);

        if (retorno == 1) {
            JOptionPane.showMessageDialog(null, "Por favor escolha um destino válido!");

        }

        if (retorno == JFileChooser.APPROVE_OPTION) {

            File diretorio = saveFile.getSelectedFile();

            System.out.println(diretorio);

            for (int i = 0; i < files.length; i++) {

                PdfReader reader = null;
                PDFparametro parametro = new PDFparametro();
                try {
                    reader = new PdfReader(new FileInputStream(files[i]));
                } catch (FileNotFoundException ex) {
                    System.err.println("Sem doc");
                } catch (IOException ex) {
                    System.err.println("Falha I/O");
                }

                String[] textoPagina = null;

                try {
                    textoPagina = PdfTextExtractor.getTextFromPage(reader, 1).split("\n");
                } catch (IOException ex) {
                    System.err.println("Erro I/O");
                }

                for (String textoPagina1 : textoPagina) {
                    String PDF = textoPagina1;

                    if (PDF.contains("Número")) {
                        String serial = textoPagina1;

                        if (serial.contains("/")) {
                            Serial = serial.replaceAll("(\\d+-\\d+-\\d+|\\d+\\/\\d+\\/\\d+)", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                            parametro.setSerial(Serial);
                            // System.out.println(Serial);

                        } else {

                            Serial = serial.replaceAll("[0-9][0-9][.][0-9][0-9][.][0-9][0-9]", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                            // System.out.println(Serial);
                            parametro.setSerial(Serial);
                        }

                    }

                    if (PDF.contains("CIX1")) {
                        String ia = textoPagina1;
                        IA = ia.replaceAll("CIX?[0-9] V\\/kA - ", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                        // System.out.println(IA);
                        parametro.setIA(IA);
                    }

                    if (PDF.contains("CIX2")) {
                        String ib = textoPagina1;
                        IB = ib.replaceAll("CIX?[0-9] V\\/kA - ", "");
                        // System.out.println(IB);
                        parametro.setIB(IB);
                    }

                    if (PDF.contains("CIX3")) {
                        String ic = textoPagina1;
                        IC = ic.replaceAll("CIX?[0-9] V\\/kA - ", "");
                        // System.out.println(IC);
                        parametro.setIC(IC);
                    }

                    if (PDF.contains("CIXN")) {
                        String in = textoPagina1;
                        IN = in.replaceAll("CIX?[N] V\\/kA - ", "");
                        //System.out.println(IN);
                        parametro.setIN(IN);
                    }

                    if (PDF.contains("CUX1")) {
                        String va = textoPagina1;
                        VA = va.replaceAll("\\sCUX?[0-9] V\\/kV -", "").replaceAll("[\\sA-Za-zÀ-ú]*", "");
                        // System.out.println(VA);
                        parametro.setVA(VA);
                    }

                    if (PDF.contains("CUX2")) {
                        String vb = textoPagina1;
                        VB = vb.replaceAll("CUX?[0-9] V\\/kV - ", "");
                        //  System.out.println(VB);
                        parametro.setVB(VB);
                    }

                    if (PDF.contains("CUX3")) {
                        String vc = textoPagina1;
                        VC = vc.replaceAll("CUX?[0-9] V\\/kV - ", "");
                        // System.out.println(VC);
                        parametro.setVC(VC);

                    }

                    if (PDF.contains("CUX4")) {
                        String vr = textoPagina1;
                        VR = vr.replaceAll("CUX?[0-9] V\\/kV - ", "");
                        //System.out.println(VR);
                        parametro.setVR(VR);
                    }

                    if (PDF.contains("CUX5")) {
                        String vs = textoPagina1;
                        VS = vs.replaceAll("CUX?[0-9] V\\/kV - ", "");
                        // System.out.println(VS);
                        parametro.setVS(VS);

                    }

                    if (PDF.contains("CUX6")) {
                        String vt = textoPagina1;
                        VT = vt.replaceAll("CUX?[0-9] V\\/kV - ", "");
                        parametro.setVT(VT);
                        // System.out.println(VT);

                    }

                }

                parametroTavrida = "[GENERAL]\n"
                        + "MODEL=TAVRIDA OSM25\n"
                        + "SERIAL=" + parametro.getSerial() + "\n"
                        + "[CURRENT]\n"
                        + "PRI=2\n"
                        + "SEC=1\n"
                        + "PRIU=5\n"
                        + "SECU=3\n"
                        + "IA=" + parametro.getIA() + "\n"
                        + "IB=" + parametro.getIB() + "\n"
                        + "IC=" + parametro.getIC() + "\n"
                        + "IN=" + parametro.getIN() + "\n"
                        + "A=CIX1\n"
                        + "B=CIX2\n"
                        + "C=CIX3\n"
                        + "N=CIXN\n"
                        + "[VOLTAGE]\n"
                        + "PRI=0,12\n"
                        + "SEC=1\n"
                        + "PRIU=5\n"
                        + "SECU=6\n"
                        + "VA=" + parametro.getVA() + "\n"
                        + "VB=" + parametro.getVB() + "\n"
                        + "VC=" + parametro.getVC() + "\n"
                        + "VR=" + parametro.getVR() + "\n"
                        + "VS=" + parametro.getVS() + "\n"
                        + "VT=" + parametro.getVT() + "\n"
                        + "A=CUX1\n"
                        + "B=CUX2\n"
                        + "C=CUX3\n"
                        + "R=CUX4\n"
                        + "S=CUX5\n"
                        + "T=CUX6\n";

                // System.out.println(parametroTavrida);
                File arqTxt = new File(diretorio + "\\" + parametro.getSerial() + ".txt");

                if (!arqTxt.exists()) {
                    try {
                        arqTxt.createNewFile();
                        qtdPDFconvertidos++;
                    } catch (IOException ex) {
                        System.err.println("Erroooo");;
                    }
                }
                // Prepara para escrever no arquivo
                FileWriter fw = null;
                try {
                    fw = new FileWriter(arqTxt.getAbsoluteFile());
                } catch (IOException ex) {
                    System.out.println("Errrrrrrrrrrro");;
                }
                BufferedWriter bw = new BufferedWriter(fw);

                try {
                    // Escreve e fecha arquivo
                    bw.write(parametroTavrida);
                } catch (IOException ex) {
                    System.err.println("Errrrrooo Io");
                }
                try {
                    bw.close();

                } catch (IOException ex) {
                    System.err.println("Errrrrooooooo");
                }
            }
            

            jLabelQtdConvertidos.setText(String.valueOf(qtdPDFconvertidos));
            JOptionPane.showMessageDialog(null, "Parâmetros criados com sucesso!");

        }


    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        pdfTable.removeRow();
        jLQtdPDFlidos.setText("0");
        jLabelQtdConvertidos.setText("0");
    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JframePDFReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JframePDFReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JframePDFReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JframePDFReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JframePDFReader().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar PDFBar;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnPDF;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLQtdPDFlidos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelPDFConvertidos;
    private javax.swing.JLabel jLabelPDFLidos;
    private javax.swing.JLabel jLabelQtdConvertidos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablePDF;
    // End of variables declaration//GEN-END:variables
}
